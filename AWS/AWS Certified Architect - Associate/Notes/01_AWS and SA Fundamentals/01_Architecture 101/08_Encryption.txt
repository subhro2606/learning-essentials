Encryption is the process of taking plain text and converting into ciphertext, and converting ciphertext into plain text. Plain text & Ciphertext can be text, images and any other data.
Encryption generally uses an algorithm and one or more keys.

Encryption is used in two major situations:
Encryption at Rest: An encrypted file that's stored on a hard drive or USB 
Encryption at Transit: Process of making sure communication between two files are encrypted. Example- https websites.

The process of encryption can be symmetrical, where the same key is used for encryption & decryption or asymmetrical, different - called public key & private key is used for encryption and decryption.
    


echo "Cats are Amazing" > hiddenmessage.txt
gpg -c hiddenmessage.txt
cat hiddenmessage.txt.gpg
# this clears the cached password
echo RELOADAGENT | gpg-connect-agent
gpg -o output.txt hiddenmessage.txt.gpg
rm hiddenmessage.txt.gpg
rm output.txt
gpg --gen-key
gpg --armor --output pubkey.txt --export 'Adrian'
gpg --armor --output privkey.asc --export-secret-keys 'Adrian'
gpg --encrypt --recipient 'Adrian' hiddenmessage.txt
gpg --output decrypted.txt --decrypt hiddenmessage.txt.gpg


#####################################################################################################################################
At the high level encryptions used in two main situations. 
The first is that you want to encrypt a file that's stored somewhere, for example, on a hard drive or USB key. 
And that's called encryption at rest. 
If you use a Mac OS or a modern Windows laptop, chances are that your boot drive is already using encryption at rest. 
The second type of encryption is encryption in transit, and that's the process of making sure that the communication between two entities is encrypted. 
If you access your online banking website or application, or if you look into Netflix or anything else with hey https in the or L, then you're using encryption in transit. 
Now the process is used for encryption at rest and encryption in transit are slightly different, but the principles are the same. 
Both of them using encryption algorithm together with one or more encryption and decryption keys and take plain text, generate cipher text and then perform the same operation in reverse. 
So take the cipher text and generate plain text. 
There are two different types of encryption known a symmetrical and asymmetrical neck to demo. 
The various types of encryption and decryption process is I'm gonna make use of a limits academy dot com feature known as playground. 
So I'm gonna open up this product now. 
Playground is a product where you can provision general purpose servers that you can use for any reason why you're doing your studies. 
You can also access cloud sandboxes, which is where you can get access to an AWS account or a Google account dedicated to you for short term experimentation and throughout this course will be using both of these features extensively for this lesson. 
I'm gonna go ahead and provision and use server. 
I'm gonna pick Amazon Linux to is the distribution pick North America for the location, a basic micro sized instance. 
And then I'll just go ahead and hit create server now in the background. 
This is gonna go ahead and provision a dedicated Lennox instance I can use for next steps. 
So while this is provisioning are pause the video and I'll resume it once we're ready to continue. 
So the only takes a few minutes, and once it says ready, then you're good to go. 
So I'm gonna expand this to get my temporary password. 
And as with our hands on environments, the using it and will be cloud underscore. 
User once got the password, we can click on this icon toe open in a Web terminal. 
Now this will open in another tab, which will connect you directly to the instance. 
Once we're there, I look in his cloud. 
Underscore user. 
How paste in the temporary password. 
You will be required to change it the first time you look in, so I paste in the current password again. 
And then I'll set my own password. 
And first I'll be demonstrating. 
Symmetrical encryption and symmetrical encryption is a type of encryption architecture where the same key is used to both in crypt on decrypt the data. 
So let's demonstrate that, and the first part will be to generate some plain text. 
So I'm gonna follow the diagram on the right, and I'm going to generate some plain text. 
So I put a simple message So cats are amazing on will redirect the output of that to a text file called Hidden Message Doc. 
Txt. 
So that's our plain text. 
Next, I'll use a utility called G PG to encrypt that plain text and generate some cipher text. 
To do that, I'll use this command so it's G PG hyphen. 
See and then hidden message dot txt. 
Now don't worry about the warnings that pop up. 
That's just happens the first time you was G PG. 
What will be asked for now is a pass phrase, and that's essentially the encryption key. 
The encryption keys used together with the encryption algorithm to change the plain text into cipher text. 
So I'll go ahead and use a pass phrase, and there we go. 
At this point, we've got a new file hidden message dot txt dot g PG, and that's the cipher text version of this. 
Cats are amazing message. 
If I can't that file just to show you what the contents are, you'll see that it's undecipherable so you're not able to understand what this is because it's cipher text. 
To understand what it says, you need to follow the process in reverse. 
We need to decrypt the cipher text back into plain text. 
Now, before I do that the G PG application. 
Does Keisha any of thes pass phrases that you use so normally? What you do is take this cipher text object and give it to somebody for them to decrypt. 
And if you do that, they'll be required to enter this pass raise. 
If I just followed the process and reverse now because I've recently used the pass phrase, it will be cased, and I won't be asked for it again to demonstrate the process. 
As you would see it if two parties were involved, I'm just gonna clear that cage. 
So I'm gonna do that using a command. 
So I'll run Echo and then reload Agent. 
And then I'll send that to the G p G Dash Connect dash agent application that just reloads the agent. 
And it just means that this pass phrase is no longer cased. 
So I clear my screen again just to make it easier to see. 
And then I'll run this command, which is G p g can use the hyphen. 
Oh, this time I'm going to specify an output file, which will be the plain text decrypted file. 
I'm gonna call that output, doc txt to make it easier to distinguish and then the object that I want to decrypt his hidden message. 
Doc text dot g p j. 
It knows that its saif attacks all need to enter the same pass phrase that I used before. 
Now, if I enter pass phrase, it's not correct. 
It will tell me that it's about session key and it will fail to decrypt the file. 
Let's rerun that again. 
This time, using the correct decryption key will get a message indicating that has been successful. 
And if we do a file listing, we can see that we've got the output doc txt that's been generated. 
If a cat that will see the original message now that's an example of symmetric encryption. 
Whilst the have done this on one server, imagine that have taken this plain text, have encrypted it into cipher text, have handed that over to somebody els and then they've had to follow the same process and rivers to decrypt that cipher text back into plain text. 
No, the advantages of this method of encryption are that it's simple and it's fast. 
The disadvantage is that if I wanted to encrypt a file and give it to you, I also need you to know the key. 
Otherwise, it's useless. 
Now, how would I give you that key? Then how would I make sure that we weren't being eavesdropped? Are overheard while I was giving you that? Kate. 
Well, this is where a second type of encryption comes in handy, and that's known as asymmetrical encryption, which actually uses two parts. 
It's two parts of the same key. 
It's a public part on a private part. 
I'm gonna go ahead and demonstrate that process and to make things easier, I'm just going to clear up some of the files that were you. 
So I'm going to clear up the safe attacks version of this file and then the output file, which, if you recall, was the plain text decrypted version of that cipher text. 
And then I'll clear the screen. 
No, to use asymmetrical encryption, we need to generate a multi party. 
So I'm gonna go ahead and do that Saul run G PG and then double hyphen Gen hyphen Kate. 
And this Alaska's a number of questions to generate this key. 
It Alaska's What type of key we want on the default is Arcee and our say so I'm gonna take that default and press enter will be asked What size of key you on to create in the default is 2048 bits, which is acceptable. 
Soldiers press enter, we can specify an expiry. 
The default is that a key does not expire. 
So I'll accept that default will need to confirm that. 
So I confirm it with a Y and press enter it will need to identify this key, and that's generally doing with your name. 
So I'm gonna enter my name and press, enter so, Adrian, and then press enter. 
I put in my email address. 
I won't bother with a comment and at this point, we're good to go. 
So I press over, okay. 
And presenter, No optionally. 
You can pass phrase this key and it is always best practice. 
I'm gonna put in a temporary press phrase on. 
I'll demonstrate why this is important later in this demo. 
So I'm gonna go ahead and enter a pass phrase. 
I'll have to confirm it again. 
At this point, it will go ahead and generate both the public and private component of this key. 
So with asymmetric encryption, we've got a public component of the key, and a private component in this process is generated both. 
Next I need to export the public component of that key. 
I'll go ahead and do that. 
So the command to do that is G P G double Dash Alma and then double dash output were willing to specify the file name for the public component of this key. 
So it's Pope keyed up txt on the double dash export, and we need to indicate which key we want to explore. 
And that's my key. 
So Adrian and I'm referencing this riel name that I defined when I created the key. 
If we do a file listing, we've got the public key dot txt, which is the public part of the key, and I can cap that just so you can see what a public key looks like. 
Now, a public key isn't sensitive. 
It all you can distribute it in any way that you want. 
I don't mind you saying this public key. 
I could email this public key toe anyone that I want to be able to send encrypted messages to me. 
I can't even put it on my website. 
The public key can only be used for one function, and that's to encrypt data. 
So to encrypt, plane taxed and where that Saif attacks that's generated can only ever be decrypted by me using the private key. 
So this is really important to understand. 
A public key is not sensitive and can be given toe anyone a private key. 
That's the sensitive part. 
That's the part that you need to make sure that only you are in possession off. 
And that's why it was best practice toe. 
Add the additional pass phrase added moments ago. 
So only if I've got the private key on the pass phrase will I be able to decrypt data that's encrypted. 
Using my public key now is always best practice to make a backup if your private key and you can do that with this command, so G PG, Double Dash Armagh, double dash output and then the name of the private key component, and in this case, I'm gonna call it priv key for private key toe A S C. 
And then the command line switch. 
To be able to export this private key is double dash export hyphen, secret hyphen keys. 
And again, you'll need to specify which key you want to do the expert on which is Adrian, which is the idea that I use when I created the key. 
No, it could do at this point. 
Now that we've got both components of this key is we can actually use g PG to encrypt something using this public key. 
So I'll do that. 
So use G PG double hyphen. 
And then I'll say, encrypt well specified double hyphen again providing the recipient. 
So this is the person that wanting to send this cipher text to and allow them to decrypt it. 
So I'm going to specify the recipient as myself on what this will do is it will use the Adrian public key to encrypt this message. 
The only person who can decrypt that is myself because I have the private key pot. 
So I'll go ahead and run that command. 
If a dual listing will note that we've now got a hidden message dot text dot g pg file, which is the cipher text encrypted. 
Using my public key, I'll clear the screen again to make it easier to see and the reverse of that to decrypt the cipher text using my private key historian G PG Double dash output, then only to specify a filing to store the result in plain text in Saul used decrypted doc txt Specify the double hyphen decrypt to decrypt some cipher text and then provide the file name of the cipher text. 
So if you recall, that's hit a message dot txt dot g p j our presenter on this and it will ask me for the past phrase. 
Now this is the pass phrase of my private key vile. 
So this is the thing that only I would ever know. 
So I'll go ahead and end to that. 
Once I've entered it. 
I'll be able to see that I now got this decrypted doc txt file that I can count and see the original message. 
So this was demonstration of asymmetrical encryption. 
Now the benefit of asymmetrical encryption is because the public key part is not sensitive. 
I'm able to publish this, and it means that I don't have to pre distribute this, Keep our toe. 
Anyone who I want to be able to encrypt data and send it to me on this asymmetric architecture is actually used for a number of things that you will have experience off if you browse to a website using hate. 
See TPS that actually uses asymmetrical encryption when it comes to connecting to a linen instance using an ssh key that also uses asymmetrical encryption. 
The pen file that you download later in the course when he connecting two instances in hands on labs or other demonstrations is actually the private key component. 
That's why you'll only ever be able to download it once, because once it's generated, it's never stored inside AWS. 
The only part that is stored inside a DBS is the public key part, and that's the part that's installed onto any Lennox E. 
C. 
Two instances that you'll use. 
So use the private key part to connect to an instance, and it verifies that you by using the public key part. 
No, I only mention that for context. 
I'm not expecting you to remember that at this stage, but it is useful to understand how pervasive encryption is, it's actually used for many different elements of AWS services. 
If you'll find throughout the course now that is all I wanted to cover in this lesson, I wanted to give you a basic overview of the different types of encryption. 
So encryption at rest on encryption in transit as well, a symmetrical and asymmetrical encryption. 
Remember that all of these processes, while being slightly different, follow the same basic architecture. 
They use an algorithm one or more encryption and decryption keys to encrypt plain, text into cipher text and then decrypt cipher text back into plain text again. 
So at this point, we don't. 
So go ahead and mark, this video is complete and I'll see you in the next.