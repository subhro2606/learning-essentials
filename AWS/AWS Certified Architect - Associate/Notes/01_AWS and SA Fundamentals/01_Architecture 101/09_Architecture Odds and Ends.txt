There are a number of terms you might hear in this course and the exam that you need to understand at a high level: 
Cost efficient or cost effective: Implementing a solution within AWS using products or product features that provide the required service for as little initial and ongoing cost as possible. Using your funds effectively and knowing if product X is better or worse than product V for a given solution. 
Secure: In a systems architecture context, implementing a given solution that secures data and operations as much as possible from an internal or external attack. 
Application session state: Data that represents what a customer is doing, what they have chosen, or what they have configured. Examples include items and quantities in a shopping cart, notes on an X-ray, and 3D position of a real-time heart scan. Session state can be stored on a server (stateful server) or externally to a server (stateless server). 
Undifferentiated heavy lifting: A part of an application, system, or platform that is not specific to your business. Allowing a vendor (AWS) to handle this part frees your staff to work on adding direct value to your customers. 


#####################################################################################################################################
Cost Efficient:
welcome back and, in this lesson I'd like to talk about some generic architecture. Wanna one terms that you used throughout this course and within the eight of US documentation. They want to cover these with you in advance because I'm mindful that I want to be as efficient with your time. It's possible by talking about these terms in advance. It means the lessons later on in the course could be focused specifically on those products without having to rehash these terms. And the terms are used extensively throughout this course, And in the AWS documentation as well as the exam. So it really does pay to cover these up front and in advance, the first pair of terms I want to talk about a cost efficient and cost effective architectures. These essentially mean to implement a solution within AWS, using products or product features that provide the required service for his little initial and ongoing cost as possible, essentially using your funds effectively and knowing if product X is better or worse than product. Why for a given solution Now, the reason that this matters is for a given requirement. Maybe you need to implant a storage system for large media files that can be accessed by a global audience. There's many ways that you can implement this inside AWS. You might utilize, for example, s three to store these large media files actual learn later on in the course. That's a really efficient way of storing objects when you need to access them globally at scale in an exam. And if you're doing solutions architecture in real world situations, you need to be able to select the most effective solution, and often this is based on cost. Throughout the course, I'll be talking to you about different architectures and different products that can be used to implement these architectures. I'll be talking about how some a more cost effective or less cost effective than others. And it's essential that when you're faced with exam questions or when you're implementing this in the real world, you can select from a group of AWS products based on the efficiency off that product for that scenario. And that's what cost efficient or cost effective means. You're not gonna provisions, a product which is not suited to global large scale object access for a large scale global object access scenario, and you're not gonna pick an object storage system for something that needs a block storage system. As you proceed through this course, you'll understand what all of these terms mean and how to effectively select the correct AWS product, so cost efficient and cost effective are essentially picking the right product based on meeting scenario for the least cost.

Secure:
Now secure in a systems architecture context means implementing a given solution that secures data and operations as much as possible from an internal or an external attack. You might be asked to implement a given scenario inside 80 years and to do so in a secure way. And as with cost efficient and cost effective, it's essentially about picking the right tools for the right job, in this case, doing it in a secure way. There are certain products inside a DBS, which do cost additional money, but add additional layers of security to a given architecture, and your job as an AWS Solutions architect is to review a requirement from a business or an exam question, determine which products or which product features are required from a security perspective and implement those and only those inside AWS again as we go through the course and introduce all of the different products and services. You will hear me say this is required from a security context, or this is the most secure solution for a given scenario. And that's what you'll need to focus on from an exam perspective. How to effectively design secure solutions.


Application Session State:
The next thing I want to talk about is application session state. Now, if you got any development experience, you might be aware of what this means. If not, don't worry, I'm going to explain it. An application session state is essentially data that represents what the customer is doing, what they've chosen or what they've configured. No examples of this include items and quantities in a shopping cart on online stores, notes on X rays and three D positions of real time heart scans. If you're looking at various systems that used in operating theatres inside hospitals, it could be any data that represents what you're doing in an application at that time. So an example of this is I'm currently logged in to the Linux Academy website. I can click on various button so I can go to the training area of the application this opens up a screen allowing me to search for various courses. I'm also able to go on hands on labs or the community, or go to quick training any of these areas. You clise my application session state. I'm logged into the Limits Academy website, and so when I click on these buttons, it no was that I'm logged in. It knows that my requests from this Web browser to the Linux Academy platform for my years aim agent control at Linux academy dot com. That at a high level, is what a session stay is. When I'm communicating with a single server, it must know what my Sessions Day is in order to present me with this information. If I browsed toe another Linux Academy server on that server wasn't aware of my session state, then it would present me with the default on logged in page for Linux Academy. It wouldn't know what's in my shopping cart. It wouldn't know that I'm logged in. My user experience would be disrupted. Now. That's important to realize, because the application session state can either be stored on individual servers. So if I'm communicating with a single Linux Academy Web server it might be stored on that server are alternatively, it can be stored externally now if the session state is stored on a server. That's what's known as a state full server. If the Sessions Day is stored externally, so on a different system than these servers that run the application when the application servers are known a stateless service. Stateless servers are always preferred because it means that you can terminate and recreate these servers or scale out and in these servers without disrupting the user experience. If you store your application session state somewhere else, it means that you can make modifications. Toe Web servers are application service without impacting the user, and that offers a massive architectural benefit. As you'll see throughout the course at this stage, I just wanted to introduce the concept because if you've not got any development experience than it might have been something that you've not come across before.


Undifferentiated heavy Lifting:
Now the final term is something that's a little bit generic, and it's known as undifferentiated heavy lifting. And essentially it means any part of an application system or platform that is not specific to your business. Now I want you to imagine for a second the Linux Academy website, the Linux Academy website. It's fairly customized, toe one specific purpose, and that's to provide I t training that helps develop your career. So the website itself is very bespoke and very custom. But do you think about it? It's implemented on platform and technologies that aren't specific to limits Academy. So we've got servers. We've got docker containers. We've got networking. We've got user authentication and authorization on all of those components of this application, a components that every other organization uses now. Undifferentiated heavy lifting is used by AWS to describe the part of everyone's application, which is the same. So an example of this is managing servers. Everybody uses servers to provide some form or some part of the application, and rather than having everybody having to manage their own version of thes things, that their own data centers their own servers, their own networking, their own infrastructure, as well as having salaried technical staff to support all of that, eight of the U. S. Suggest that you give them the undifferentiated heavy lifting. So you use their services to provide access to various different cloud products as a service and that allows you to focus on your business specific elements. So by utilizing the cloud on AWS specifically, you can offload a lot of the shared common General Day to day Operations to the cloud vendor and focus on building applications specific to your business. So it's a fairly fuzzy and generic term, but you'll hear it a lot specifically in AWS documentation. Now, at this point, we have actually finished off this architecture wanna one topic of the course. This topic has focused specifically on a lot of generic architectural concept. So things that aren't really a to the U. S. Specific in the next topic, which is eight of the U. S. Architecture 101 I'll be moving towards more aid of the U. S. Specific architecture Fundamental. So we'll be looking what an AWS account is. Taking a tour of the various different aid of the U. S. Service is looking at how the AWS global physical infrastructure is constructed and then I'll be talking about the AWS well architected framework. Now this is going to be the last theory dense topic of the course. Once we finished off eight of the U. S architecture 101 I'll be moving into one more topic called product fundamentals, where I'll introduce AWS s three, which is simple storage service as well as of product called Cloud Formation, which is automation and operations product. Inside AWS. I'll be introducing both of those products on. Once we've done that, we've built up the foundation that we need to start off with the first riel AWS section of the course, which is identity and access control. So just bear with me through these next two topics AWS, architectural Wonder one and product fundamentals, and then we're gonna start learning aws.