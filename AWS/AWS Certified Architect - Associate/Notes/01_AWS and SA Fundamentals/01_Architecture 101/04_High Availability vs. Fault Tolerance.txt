High Availablity:
High Availablity is hardware/software configuration allowing a system to recover quickly event of a failure. Highly available System may minimize outage and incase of a failure, the system may recover quickly but there may be disruption of service.
Fault Tolerance:
Fault Tolerant systems are designed to operate through a system failure with no user impact. They are generally more expensive and are complex to achive.


#####################################################################################################################################
Welcome back and in this lesson I want to talk about the differences between high availability and fault tolerance. 
Now these are two terms, which I find really important, and I know they will help you to do well in the exam and make you a better solutions architect. 
The difference between high availability and fault tolerance is small, but it's really important to understand. 
It's also really subtle and I know a few students listening to this might disagree with my definitions, because a lot of vendors use both of these terms in a really fussy marketing filled way. 
Within the AWS space, you might not even hear the term fault tolerance used extensively. 
High availability has tended to be used inside AWS architectures to mean both high availability and fault tolerance. 
It's just one of those sets of terms where the exact definition has become fuzzy but I want to tell you the exact differences between both of these terms because I feel they'll help you make good Solutions Architect decisions in production situations. 


High Availablity:
Now I'm going to start with high availability. 
High availability is hardware, software, and configuration, allowing a system to recover quickly in the event of a failure. 
Now the key part is the recover quickly. 
It doesn't prevent a failure from occurring, and it doesn't stop that failure from impacting customers. 
It simply recovers quickly in the event of a failure. 
The primary aim of high availability is to minimize downtime and recover quickly. 
It's not to prevent the failure from occurring at all. 
Now, visually, this diagram that's on the top right of your screen shows this. 
Let's say you're communicating as a user with an instance inside AWS. 
Maybe it's running a WordPress blog, something that you want to keep online as much as possible but it's not super critical, so people won't die if it's offline for three or four minutes. 
Well, let's say that instance fails. 
So now you as the user are being directed towards an instance which is failing to meet your requests so you're not able to load the blog. 
Service has been disrupted to your customers. 
If you've done your job well in AWS, you'll have an automated system in place, which will create a new instance with all the same software installed and configured in the same way. 
The new instance will take over, and you can continue looking at your cat pictures blog. 
In this example, there are two key elements that I want you to focus on. 
The first is having a system in place that can create this recovery instance in the same configuration as the one that's failed and the second is the process which actually performs this recovery ideally in an automated way. 
If you do it in an automated way then it can occur quickly without any human interaction, and this is the essence of high availability. 
It minimizes outages, and it recovers quickly but with highly available systems, there might be a disruption in service. 
There might be an interruption to the user experience, a time where the system isn't operating at either 100% performance or 100% reliability or even at all. 
Now, high availability might be used a larger systems, such as amazon.com or, again, outages and not ideal. 
It can lose the money, but nobody is going to die. 
This is the key difference between high availability and fault tolerance. 

Fault Tolerance:
Fault tolerance is a system designed to operate through a failure with no user impact. 
It's generally more expensive and more complex to achieve and do so reliably. 
Now the diagram on the bottom right shows an example of this. 
Let's say you, as a customer, are accessing a system that's running on three instances running inside AWS. 
Again don't worry about the term instances. 
I'll introduce all of this as we go throughout the course. 
Now, you're not accessing these instances directly, you're using what's known as a load balancer and as the name suggests, it balances the load of customers that are communicating with this load balancer across one or more backend resources in this case instances. 
Now imagine in this case that one of these instances fails. 
What will occur is a load balancer will simply move over any of these user communications to working instances and if it's done correctly, that will happen without any interruption to the user experience. 
The difference is very subtle because in some cases highly available architectures can also use load balancers. 
So a load balancer isn't indicative that it is fault tolerant. 
To be truly fault tolerant, a failure has to occur and not impact the customer. 
Now, why does this matter? Why is this small difference so important? Well, the comparison I like to make is this: Imagine that you have a large four by four car, four wheel drive, designed for various rugged terrains, and you're currently driving it off road. 
Now imagine that tire explodes. 
This will cause an outage. 
You'll need to stop the vehicle, change the wheel and continue but in this case, the vehicle is highly available because you probably have a spare wheel and the tools to change it. 
In certain cases, high availability is fine, and it's generally much cheaper to achieve than fault tolerance but in some cases, high availability isn't enough. 
Imagine a plane. 
What happens if a plane develops a major engine fault in midair? It can't just stop and swap out the engine. 
Planes can operate on less than their normal number of engines and still be okay. 
Planes are fault tolerant. 
Planes generally have multiple independent systems, so electrical control, hydraulics, and various other critical systems. 
If one of them develops a fault the plane as a whole tolerates this fault and continues. 
The plane's electrical and control systems are designed to operate in an active, active configuration. 
So whenever you're flying a plane, you're actually performing actions and they're replicated across multiple independent systems. 
In this case, all of these three instances perform exactly the same thing. 
So if one of them fails, the connection could be quickly moved over to another and the user won't experience any difference. 
The thing is fault tolerance costs much more to implement, and it's much more complex as you'll see throughout this course. 
As a minimum, you generally need to have infrastructure sitting there, ready to go within a moment's notice that's running without any load being placed on it. 
If your nominal usage for this architecture, for example, requires two instances, then you need at least three running, so that if one does fail, all those connections can be moved over without impacting performance. 
Now another situation where fault tolerance provides value is an operating fit where people are having major operations. 
In that situation, you can't deal with interruption to service, but the amazon.com website while it's probably not ideal, it can get away with just being highly available. 
There will be a monetary loss if the service is interrupted, but the business is able to do those calculations can I tolerate a two or three minute outage and just use highly available systems rather than invest the additional expense in getting true fault tolerance and have no interruption? It's always dependent on the situation. 
In some cases, businesses will require fault tolerance. 
In some cases, they won't. 
For your benefit, you just need to understand the differences between those two. 
When in doubt, I always assume that fault tolerance is required. 
If I hear a requirement for a highly available system from one of my clients, it's always worth clarifying whether they mean just highly available or that they also want the system to tolerate faults. 
Now, in the next lesson, I'm going to be covering disaster recovery, which is another really important topic to understand if you're going to be using these skills in the real world and if you want to get a really high exam result. 
So let's complete this video and I'll see you in the next video where we'll talk about D.R. 
