Scaling:
Scaling is the ability of a system to scale with ever increasing demand, and it can be done in two different ways. 
Vertical Scaling: Vertical Scaling is achieved by adding additional resources in form of CPU or memory to existing machines. By doing so, machine is able to service additional customers or perform compute tasks faster.
(-)Maximum Machine Sizes will constrain the ability to scale-either technically or from a cost perspective.
Horizontal Scaling: Horizontal scaling is achieved by adding additional machines into a pool of resources, each of which provides the same service. 
(+)Doesn't suffer any size limitations like Vertical Scaling and can scale to near infinite levels.
(+)Since this is a pool of resources the risk is spread, failure of any resource in the pool would effect a small number of resources
(-)Requires application support to scale effectively.


#####################################################################################################################################
Welcome back and it's time to cover scaling in AWS the term scaling is often used interchangeably with another term elasticity. 
They are different, and it's important as a solutions architect that you know that difference. 
Now, in this lesson, I'm just going to be talking about scaling. 
We're going to be covering elasticity, which is coming up in another topic. 
So by the end of this group of lessons, you'll understand the differences. 
But right from the start, just understand they're not the same thing. 
Scaling is the ability of a system to scale with ever increasing demand, and it can be done in two different ways. 
We've got what's known as vertical scaling and horizontal scaling. 
Now appropriately selecting between these two is really important because which one you use will decide how you architect your systems, the cost for scaling and what, if anything, developers will need to do to support the scaling method inside their applications. 
Now, the first type of scaling, which is vertical scaling, is the one that most people mean when they talk about scaling. 
It's the traditional type of scaling that doesn't really require any application modification. 
I want you to imagine an application let's say a simple block and its running on a virtual server and let's say, for argument's sake, it can handle 1,000 visitors per hour. 
If your blog becomes popular and starts getting 1500 visitors per hour then their experience at the site will decrease. 
The virtual server won't have enough resources to handle a load perfectly so you could scale the server that is increase the size of the server, so add additional CPUs, additional memory, maybe increase the disk capacity or performance. 

Vertical Scaling:
Vertical scaling is achieved by adding additional resources in the form of CPU or memory to an existing machine. 
By doing so, the machine is able to service additional customers or perform compute tasks quicker so you can go from a medium server to a large server to an extra large server and as you do so, you're able to cope with an ever increasing number of users. 
The bigger the virtual server or the bigger the instance, the more users that it can cope with but it generally has a number of really important limitations. 
You've got a single instance or a single virtual server that's hosting your application, and that means significant business risks. 
Another issue is that there are limits to just how big an instance can be. 
You can keep adding additional CPU, an additional memory, but at some point you will hit a wall. 
Now the bigger the instance or virtual server is, the more they cost, and this is not a linear increase in cost. 
The bigger you go, the more premium that you pay for every additional unit of capacity. 
In case of physical servers, you need to power down the server and effect hardware changes that server. 
If it's a virtual server, you can generally change resources but it still does require a reboot. 



Horizontal Scaling:
Horizontal scaling is a completely different architecture. 
With horizontal scaling, you don't increase the size of the instance. 
You add additional instances. 
A platform, instead of being one big instance, might use 1, 3, 6, or even hundreds of smaller ones. 
Horizontal scaling is achieved by adding additional machines into a pool of resources each of which provide the same service. 
Horizontal scaling suffers from none of the size limitations of virtual scaling, and it can actually scale to a near infinite level but it does require application support to scale effectively. 
Now it does have a few massive benefits because you're utilizing small instances, you can generally use more smaller instances and while you get the same capacity, you're generally getting it at cheaper price because smaller servers are generally commodity resources within most cloud platforms. 
So you can utilize say 10 servers that are one tenth of the size of the biggest server and get those 10 servers for a cheaper price than that single biggest server, additionally, you're spreading the risk because if one of these services fails, then you know, impacting the service for your entire set of users. 
You can simply ship this load over to a different server, and any major failures will impact a smaller number of users. 
Horizontal scaling can also be done often without outages because you're adding additional resources to this pool you're not changing existing resources so you don't need to disrupt your existing service provision. 

Complications of Horizontal Scaling:
The complication is that multiple instances on multiple servers means additional challenges such as needing application support. 
You might need to have your data for the application stored centrally in another service, so all of the instances can access it if your data was stored locally on each of these instances, it would mean that you're essentially locking a group of users to that instance. 
If that instance failed then your users could lose data or, in the best case, have some sort of service disruption. 
So, ideally, you want to make sure that any of the instances that are involved in horizontal scaling they have the data separated to another service and horizontal scaling is just more complicated, but it's much more efficient if you can use it. 
Now horizontal scaling as a concept is something that we will be touching upon extensively throughout the course. 
You'll be getting your hands dirty and getting practical exposure to both vertical scaling and horizontal scaling. 
At this stage, I just wanted to introduce the concept so that you understand what we're doing later in the course. 

So go ahead and complete this video and join me in the next one, where I'm going to be talking about application tiered architecture.