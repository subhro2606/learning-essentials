Architecturally an application consists of 3 tiers:
Presentation Tier: Interacts with the consumer of the application.
Logic Tier: Delivers the application functionality.
Data Tier: Controls interaction with a database of a kind.


Monolithic Application: If the presentation, logic and the data tier are implemented in the same codebase and are not separated they are called monolithic application.
(-) Hard to scale.
(-) Only Verical Scaling is possible.

Tiered Application: Applications if designed correctly, implement these tiers as isolated components. Architecturally this can be provisioned in different machines or pools of machines. As each tier has different demands for CPU, memory & IO, it allows each tier's performance to be managed independently.
(+) Offers lot more flexibility in terms of scaling the application.
(+) Horizontal Scaling is possible.

#####################################################################################################################################
Welcome back, and in this lesson, I want to briefly talk about tiered architecture and why it matters to you as a budding AWS Solutions Architect. 
If you aren't a developer, you might not have been exposed to this concept, and it's really important to understand both from designing applications and knowing how to use this knowledge to scale them effectively. 
So this isn't just a software thing. 
To be an effective solutions architect, you need to have a basic understanding of application architecture because only when you understand the architecture of an application can you design a system's architecture to host that application. 
When you think of an application, this could be anything. 
It could be an application on your mobile phone on your desktop or laptop or it could even be a web application, maybe email, or an online store. 
You might think of this as a single thing, one thing, an application but stop for a minute and consider this: whenever you're using an application, there's a part of the application which is interacting with you. 
So when you're watching this video right now, either via the web interface of the Linux Academy website or via the mobile application. 
Part of the application is showing you that video. 
Part of the application is allowing you to click on buttons or interact with different UI elements. 
So scrolling down, clicking, various pop ups, and notifications. 
This is one specific part of the application. 
There are other parts as a part of the application, which must be interacting with data somewhere. 
Maybe it's storing the data local it could be storing it onto a database. 
That's the part of the application that handles the data. 
Now in between those two things, there's another part of the application. 
The part that does things. 
It makes decisions. 
It takes actions and these are the three parts of the common three tiered application model. 
The presentation tier is the part that interacts with you as the user of the application. 
The data tier is the bit that handles data storage and retrieval to and from a data layer. 
On the logic tier, which sits in the middle, is a thing that does things the thing that makes decisions. 
Architecturally, applications consist of these three tiers, the each consisted their own individual piece of functionality, which together make up the application. 
Now, if these tiers were implemented into the same code base and not separated, then we generally refer to that type of application as a monolithic application and a monolithic application, it's hard to scale, and it generally has to be done vertically. 
Remember when I talked about vertical scaling in the previous lesson, we discussed the limitations. 
This is one of the reasons why you might have to use a vertically scaling architecture to host application. 
Because it's monolithic, you can't treat these separate components. 
Generally with a monolithic application, it lives on a single server, and you have to scale the application as a single unit. 
If you design an application properly and you implement tier design then each of these individual components is implemented as an isolated piece of code. 
Architecturally, they could be provisioned on separate machines or pools of machines. 
Each component has its own demands on CPU, on memory, and on disk and by separating each of these components using a proper three tier tiered design, you can actually split them up and scale them independently and generally when you're utilizing a three tiered application, you can also utilize horizontal scaling. 
So as a minimum, you get the benefit that these can each be running on their own individual resources. 
Generally, though you can scale them independently. 
So the presentation tier might use a single unit of compute. 
The logic tier, though, because it's generally accepting input from the client and performing various compute activities its demands might be more extensive and so it might run on three independent compute instances. 
The data tier that might be a single high performance database cluster running on two resources for high availability or fault tolerance. 
By using a tiered design, which is generally something that software development teams focus on then you as a Solutions Architect have a lot more flexibility over how to implement the application. 
Now I hope you start to see how these theoretical concepts are starting to relate to each other, and you'll soon start to see why they're important specifically to AWS as you proceed through out the course. 
Once you start doing the real AWS component, so identity and access control, compute and networking, you'll start to see how a lot of these concepts map onto various different AWS products, and that's what I want you to achieve. 
At this point, I just want you to understand these concepts and understand why they're important to use if you're going to be an effective AWS Solutions Architect. 
For now, that's everything that I wanted to cover. 
So go ahead, mark this video as complete and when you're ready, I'll see you in the next lesson.