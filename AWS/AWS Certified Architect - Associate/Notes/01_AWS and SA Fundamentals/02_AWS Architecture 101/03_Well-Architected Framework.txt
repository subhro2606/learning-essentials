
Use the PDF:

The Well-Architected Framework has been developed to help cloud architects build secure, high-performing, resilient, and efficient infrastructure for their applications. 
Based on five pillars — operational excellence, security, reliability, performance efficiency, and cost optimization — the Framework provides a consistent approach for customers and partners to evaluate architectures, and implement designs that will scale over time.

Operational Excellence: The operational excellence pillar focuses on running and monitoring systems to deliver business value, and continually improving processes and procedures. Key topics include managing and automating changes, responding to events, and defining standards to successfully manage daily operations.

Security:The security pillar focuses on protecting information & systems. Key topics include confidentiality and integrity of data, identifying and managing who can do what with privilege management, protecting systems, and establishing controls to detect security events.

Reliability:The reliability pillar focuses on the ability to prevent, and quickly recover from failures to meet business and customer demand. Key topics include foundational elements around setup, cross project requirements, recovery planning, and how we handle change.

Performance Efficiency
The performance efficiency pillar focuses on using IT and computing resources efficiently. Key topics include selecting the right resource types and sizes based on workload requirements, monitoring performance, and making informed decisions to maintain efficiency as business needs evolve.

Cost Optimization
Cost Optimization focuses on avoiding un-needed costs. Key topics include understanding and controlling where money is being spent, selecting the most appropriate and right number of resource types, analyzing spend over time, and scaling to meet business needs without overspending.

#####################################################################################################################################

Welcome back and in this lesson, I want to talk about the AWS well-architected framework. 
Now this is a piece of theory that comes in really handy as a solutions architect. 
It was designed by AWS who faced customers having difficulties building systems in AWS. 
More importantly, there were the same recurring issues. 
So AWS wanted to bring together the best practice principles, which will learn to cross the entire costume a vase and make those available to all customers. 
The well architected framework is actually a set of documents and, more recently, a tool which includes a number of key components. 
We've got the pillars of the well-architected framework, which are security, reliability, performance efficiency, operational excellence, and cost optimization. 
The well-architected framework includes a set of design principles We've got a set of general design principles and design principles that apply to each of these pillars specifically. 
The well architected framework also includes a number of questions which are designed to identify and help you improve any particular problems that you're experiencing with your infrastructure. 
The aim is to let you build and deploy into AWS faster with lower risk and giving you a library of shared concepts, which will help you make good decisions. 
The key principle is that if you're a customer of AWS, you'll likely not to be doing much that's specific to you or specific to your business. 
Yes, you're building an application to support your business, but lots of the stack of the application is the same that other customers are using and it's likely that much of your APP shares the same architecture requirements and challenges of other applications used by other AWS customers. 
So bringing altogether the well architect of framework is essentially a set of best practice areas, principles, concepts that can help you implement effective AWS solutions. 
Now, historically, the well-architected framework was a PDF, a white paper style PDF, which had all of these individual pillars available as separate PDFs each containing questions and principles and other concepts and elements specific to the individual pillar. 
More recently, though, AWS have released the well architected tool, which is a way that you can evaluate and work in a workflow way with AWS to achieve the best architectures in AWS. 
Now we're not going to cover— now we're not going to cover the tools usage specifically in this lesson, but I am going to give you an opportunity later in the course to assess an infrastructure using the well architected tool. 
For now, I want to talk through at a high level what the well-architected framework actually does. 
So the well-architected framework introduces a number of general design principles. 
So these are principles such a stop guessing your capacity needs. 
So utilize data to understand what your capacity needs will be and scaling based on those capacity needs. 
We've also got test systems that production scale. 
So this is designed to get customers to actually test systems at the scale that they're expecting the usage to be, rather than doing small, isolated proof of concepts. 
Another one is using automation to make architectural experimentation easier. 
So by using automation, you're able to build, rebuild and modify or evolve infrastructure, and you're able to see what changes that modification takes. 
Maybe it's a better result. 
Maybe it delivers the same issues or maybe it's a suboptimal result, but by using automation, you get to experiment another one is allow for evolutionary architectures, and another is to drive architectures using data, so they're general design principles that are available within the well architected framework and I do recommend as a bit of background reading, you do download the AWS well-architected framework White Paper and read it as you proceed throughout this course. 
A lot of this is really dry theory, and it's not going to be of any use for me to talk through it in detail. 
You will gain a lot of the knowledge and understanding of this framework naturally, as you go through this course but it is a worthwhile read just to understand the perspective in the context that AWS have when it comes to evaluating architectures because a lot of the AWS exam questions are based on an understanding of this framework, so it does pay to have at least a high level understanding of what it contains. 
Now each of the individual pillars focuses on a specific element of AWS architecture, so we've got security. 
The security pillar includes the ability to protect information assets and systems while delivering business value through risk assessments and mitigation strategies. 
So the design principles of this is to implement a strong identity foundation, use logging and other metrics to enable traceability, applying security at all layers using various different AWS products, which you'll experience throughout this course. 
Automate the security best practices so using AWS products and features together with automation to make sure that these best practices are implemented automatically without any human interaction. 
This protect data in transit and at rest. 
So to use AWS products and services to implement that in transit and at rest encryption that I've talked about in previous topics of this course and then the final design principle is to prepare for security events, so take action in advance to protect your systems from any negative security events. 
There's also the reliability pillar on the reliability pillar includes additional principles, so testing your recovery procedures automatically recover from failure. 
So using AWS products and services that you'll gain exposure to throughout this course to implement high availability to recover from failure as quickly as possible. 
You'll learn in this course how to scale horizontally to increase aggregate system availability. 
So by using horizontal scaling you actually as well as improving your ability to scale, you also have positive impacts on system availability, and you'll see that as you go through this course. 
Now capacity is often very closely aligned with reliability. 
If you don't provision enough capacity for demand, then you'll tend to have a reduction in reliability. 
So a design principle inside this is to stop guessing your capacity use the AWS tools and services to influence your scaling decisions and, ideally, use elasticity to make that a completely automatic process and then, finally, you want to use automation to manage the changes to your environment. 
So rather than having an inconsistent environmental change process, where different people might do things in a different way, by using automation, you can make sure that systems are adjusted in a very specific, well tested, and consistent way. 
So if you're wanting to resize the system or to perform a system upgrade and you do it via automation then you know that that upgrade processes tested, you know that you're not going to get any unexpected results at the end of the process, and that improves reliability. 
This performance efficiency in that focuses on the ability to use computing resources efficiently to meet system requirements and maintain efficiency as demand changes. 
So that's using concepts such as serverless architecture and advanced scaling technologies inside AWS such as elasticity, which I cover in-depth throughout the course to achieve a better performance efficiency. 
So scaling the capacity of the system and thus its performance in a way that is closely aligned with demand. 
By using the other pillars, you're also able to experiment more often and try different architectures to see if they're more efficient or less efficient and by doing so, you always make sure that your systems and platforms are as efficient as they can be. 
Now the operational excellence pillar is often listed as the first and the most important pillar inside the well architected framework because it influences everything else. 
The operational excellence pillar is focused on the ability to run and monitor systems to deliver business value and constantly improve. 
So never leave a system in a static or stagnant state constantly look at ways to improve. 
Is the environment having problems? How can you improve it? How can you remove points of performance contention or performance issues to overall increase the efficiency of a system? So that might be performing operations as code by controlling infrastructure or operations as code and by integrating them with your development work flow, you can make sure that the infrastructure and any operations processes are aligned with what you development team are doing. 
You can also annotate documentation. 
You can make frequent small and reversible changes. 
By using automation in your environment, you make the effort involved in making changes significantly less than if it's manual because of that, your business can tolerate more frequent changes and if you can do more frequent changes, those changes can be smaller. 
If they're smaller, they can be controlled easier and reversed easier and that just means that whatever change you're doing in the business, the effect of that change, the potential fallout, the business disruption is minimized. 
You need to be constantly looking to refine your procedures. 
So using all of the AWS metrics and monitoring to understand where your operations procedures fail and where they can be improved. 
Look to anticipate failure. 
You should plan for failure inside every environment because failure always does occur, and any systems which look as though they don't fail simply anticipate the failure and operate through them, and that's why, when I talked about fault tolerance earlier in the course, it was so important because by anticipating failure and designing your systems to either correct the failure before it becomes a problem or to operate through that failure, you can actually increase the availability of your application or system and remove any potential disruption and then at the bottom, we've got learned from all operational failures. 
This is really important. 
Essentially, you will have failures within your system which you didn't anticipate and which caused a lot more impact than you would like. 
The key part that is to learn from that mistake. 
Why did it occur? What can you do to either prevent it from happening in future or minimize the impact? And then last pillar is cost optimization and this is one element that tends to be underestimated or not looked at effectively when it comes to implementing systems inside AWS. 
AWS implements a lot of ways in which you can reduce costs. 
You can adopt a consumption model, you can utilize products and services inside AWS within your architecture that are delivered as a service. 
Products which might have a consumption billing model. 
So where you only pay when you utilize that resource. 
The whole serverless architecture, for example, is built around the concept of only using resources at the point of when you consume them, so not having any base costs for your infrastructure. 
You need to look to stop spending money on data center operations. 
When I talked in a previous topic of this course about undifferentiated heavy lifting, that was one element of it. 
So AWS manage data centers day in, day out and to do so effectively they do it probably more efficiently than you can internally with your own operation staff. 
So get rid of that component. 
Stop managing those data centers and implement the solutions inside AWS and then retask those employees to work at adding consistent business value. 
You need to analyze on attributes expenditure to individual business unit. 
So with AWS as you'll learn throughout this course, you can use the billing reports you can use various metering aspects of services to effectively look who in your organization is using products and services if your organization uses different AWS accounts as you'll learn later in the course you can join these together and use consolidated billing to get that single overview of your entire AWS spend and look at which areas of the business are actually consuming those resources. 
You can target that and see if there is a more effective use of those resources and help them bring their individual costs down and then lastly, use managed services to reduce the cost of ownership. 
I'll talk later in the course about database as a service, AWS's RDS product or relational database system, which is a way that you can deliver a database product as a service so you don't need to manage your own servers, manage your own backups, or your own maintenance. 
You can consume these features of these products as a service. 
So by using managed services where possible, you can achieve significant reductions in the overhead of managing your infrastructure and thus can reduce the cost. 
Now I've skipped over these really quickly, and I don't expect you to remember every single detail. 
What I would suggest is that you do download the AWS well architected framework. 
I'll include a link in the lesson description and then as you're proceeding throughout the course every time I mention a product or service, refer it back to these five individual pillars: security, reliability, performance efficiency, operational excellence, and cost optimization. 
How does implementing each of these products or services—how does the way in which I should implement them affect each of these individual pillars? By focusing on the well-architected framework and the content that I talk about in this course I know it's going to be an advantage for the exam because you're going to be thinking about infrastructure architecture the way that AWS want you to. 
Now, again, this lesson is only a high level introduction to this framework. 
It is something that I want you to go away and read in your own time as you proceed throughout the course. 
You don't need to read it in advance. 
You won't need it to finish off the course but do make sure maybe that you're reading a part of this PDF every single day and then by the end of the course, when you ready to take the exam, you'll have read it start to end, and you'll be aware of the context that AWS look at their architectural deployments with. 
So that'll put you in a really good situation for the exam. 
With that being said, that is everything I wanted to cover in this lesson. 
So go ahead mark it as complete and I'll see you in the next.