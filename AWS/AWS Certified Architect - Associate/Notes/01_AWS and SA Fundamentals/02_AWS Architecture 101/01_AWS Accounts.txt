AWS Accounts:

AWS Accounts provide 3 functions:

Authentication: AWS Accounts are isolated. Initially they are created with a root user. This user via it's username, password, API Keys, is the only identity that can use(authenticate) to the account.
If the account credential is leaked, the impact(blast radius) is limited to that account.

Authorization: Authorization is controlled on a per account basis. The root user starts with full control of the account and resources. Additional identities can be created or external identities can be granted access.
Unless defined other wise no identitity apart from the root account has access to the resources.

Billing: Every AWS account has its own isolated billing information. This is initially in the form of an attached credit card, but established accounts can be converted to use traditional, term-based invoicing. By default, you are only billed for resources in your account. Billing or security exploits are limited to a single account. 
However we can have "Consolidated Billing" where a master account is charged for all member account usage.


#####################################################################################################################################
Welcome back and in this lesson, I'm going to be talking about AWS accounts. 
As you go through the course, you'll be getting practical experience with AWS. 
You'll be watching me do things. 
You'll be using the Linux Academy platform to implement things yourself and maybe even using your own AWS account or one provided by your employer to experiment with. 
Now, I thought that before we get that far, it's worth talking about what an AWS account is and what function it serves architecturally. 
Now, before I do that, I want to refresh your memory about the log in process of an AWS account and to do that, I'm going to go across the Linux Academy website, select the Cloud Playgrounds icon, go to our cloud sandbox product, and start off an AWS sandbox account. 
Now, this is a useful feature of the platform, which gives you access to an account on a temporary basis. 
It's really useful to test something or play with a specific AWS product or feature. 
Now you always log into these sandbox accounts using the same user. 
It's cloud_user, and each time you'll be given a dedicated password. 
So I'm going to copy that password into my clipboard and then go ahead and open this sandbox account in a new tab. 
Once that's opened, I'll just log in. 
So cloud_user and then I'll paste in this password and click on sign in. 
So this is an AWS account. 
In this case, it's one that we provide for you to use as part of our lab platform but it could just as easily be your own account, like the one I showed you how to create at the start of the course. 
The analogy that I normally used to explain an AWS account is a locked house. 
Let's use your house as an example in many ways and account works in the same way. 

Accounts:
Accounts provide three functions. 

Authentication to a domain:
The first is to act as an authentication domain. 
So what I mean by that? Well, let's have a look on the diagram on the right of your screen now. 
When you create an AWS account, you're also creating an account root user. 
This is the admin user for that one single account. 
If like on the example on the right of your screen, you have two different AWS accounts, then you also have two account root users, so the root user of account one and the root user of account two. 
Now this is important because these two root users are different. 
The root user of account one cannot authenticate to account two, and the root user of account two cannot authenticate to account one. 
The only entities who can access your account of the people who you configure to be able to authenticate to your account. 
That's it. 
Just like while you and I may have keys to our houses your keys will only work on your house and my keys, my house. 
Now, why this is important from an architecture perspective is that if for whatever reason your account credentials are leaked. 
So in this example, let's say, the root user of account one their credentials are leaked. 
If that occurs, it only impacts that one account, and we call this an isolated blast radius. The security impact for leaked credentials for an account is by default, limited to that one single account. So having this isolated blast radius means that in some cases, it might be worthwhile to have multiple accounts, maybe an account per project, or maybe an account per person, or maybe one for each function. So dev, or test or production, I'll talk in much greater detail about multiaccount strategies later in the course. At this point, I just wanted to introduce why it might be useful. 
Now accounts also perform authorization. 
Remember, from a lesson in the previous topic authorization is a process which controls access to resources when you've authenticated. 
Well, accounts are also involved in authorization. 
The same logic follows. 
Users that are in account one have no access by default to resources in account two, unless the root user of account two configures it that way, and the same is true in reverse, any users of account two have no access by default to any resources in account one unless the root user of account one makes those changes. 


Authorization:
Authorization is controlled on a per account basis. 
The root user of that account starts with full control of that account, in addition to any of its resources. 
Additional identities could be created in that account or external identities AWS or otherwise can be granted access but unless defined otherwise, no identity except the root user of that account have access to any resources in that account. 
Now you can configure accounts so that external users are authorized to access resources, but it's a specific act to do so. 
So by default, account one is the only entity that authorized to access the resources in account one. 
It starts off with the root user only, but you are able to create additional users in that account, which I'll step through later in the course. 
Now, the last function that accounts provide is billing. 
By default, every account has billing information attached. 
It starts off as a credit card, and it can be moved over to invoices, which businesses tend to prefer but every account has its own billing information. 
This means that only you or users that you configure to authenticate and users that you authorized to access your resources in your account can cost you anything. 


Billing isolation:
The account provides billing isolation. 
Now, the house analogy, in this particular case, is that any electricity or gas or any of the utilities that I use in my house don't cost you anything in your house. 
I'm able to let you into my house, and you can use a resources in my house that cost me money but unless I explicitly authorize that you can affect any billing for my house or in this case, my account. 
Later in the course, I'll talk about how accounts can be linked using a process called Consolidated Billing. 
This allows you to have one account with billing information attached, other accounts can be attached to the account so you can essentially have one bill for potentially hundreds of accounts but that's something that you explicitly need to set up and I'll show you that later in the course. 
That's essentially accounts architecturally, they're really important to understand that as a solutions architect we can isolate things with different security level functions or split bills into separate business units, or even have an account per project. 
As a solutions architect, we have a lot of flexibility, so throughout the course I want to ensure that you're 100% comfortable with how to use accounts in this way but that is everything for this lesson. 
I will be elaborating more on accounts as we go through the course, but at this stage it's just an introduction. 
So you're aware of the key pieces of functionality that accounts provide. 
In the next lesson, I'll be talking about AWS's physical global networking, so feel free to mark this video as complete and when you're ready, you can move on to the next.