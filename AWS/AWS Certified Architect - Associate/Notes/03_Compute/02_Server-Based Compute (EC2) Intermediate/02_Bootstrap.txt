Bootstrapping is a process where instructions are executed on an instance during its launch process. Bootstrapping is used to configure the instance, perform software installation, and add application configuration. 


User data is the EC2 implementation of bootstrapping. 
Essentially, whatever you paste in this user data section is used by the EC2 instance, when it's first provisioning so it can install applications, it can perform certain configurations, it can pull down data from a GitHub repository or an S3 bucket. 
Anything that you can put as a script or a script like set of directives could be given inside this user data. 
Now this user data can take a number of different forms. 
It can either be a shell script or it can use something called cloud init. 
In EC2, "user data" can be used to run shell scripts (Bash or PowerShell) or run cloud-init directives. The scripts are OS specific but cloud-init directives are OS agnostic.



Exam Tips: 
Choosing between AMIs and bootstrapping doesn't have to be a binary one. 
You can choose to use and AMI to bake in lot of the really intensive parts of building an application. So if you're doing an installation and that installation say takes 20 or 30 minutes and then after the installation, you can do some configuration. 
What you might want to do is AMI bake the installation and then perform the configuration dynamically, using bootstrapping. 
So for the lengthy resource intensive part, that could impact product we can use AMI baking and for the dynamic configuration part that you want to do it at instance provisioning time you should used bootstrapping and generally, most production systems use a combination of the two. 
There are exam questions on this, so when you do face an exam question that might mention AMI baking or bootstrapping, remember, AMIs are for your lengthy static configuration. 
Bootstrapping is what you use for anything dynamic. 
When you're facing a question that talks about, you need to get an instance into production within a certain time frame and then it says that the application might take 20 or 30 minutes to install focus on the timeframes. 
It's those that will give you the clues whether you need to use AMI baking or bootstrapping. 
If you need to do the work upfront and save time, bake it into the AMI. 
If you need to do any dynamic configuration then use bootstrapping. 














#############################################################################################################################################


Welcome back and in this lesson I want to talk about bootstrapping, which is the process of giving an instance a series of commands to do as part of its provisioning process. 


Bootstrapping is what allows us to customize what the instance will do and how it's configured. 
It means that by the time an instance is provisioned, it's ready to go, configured in a certain way, with certain capabilities. 
Now you've actually already seen me use a form of bootstrapping in the previous lesson, when I used the user data component of an EC2 instance to install the Cat Hall of Fame website right before I created an AMI. 
User data is how EC2 performs bootstrapping. 
So just to quickly refamiliarize ourselves, let's take a quick look. 
So I'm going to open a sandbox account as part of the Linux Academy platform. 
I'll need the cloud_user and my unique passwords. 
I'll just go ahead and log in if I want to do any EC2 demonstrations and not involved in networking I'll need to create a default VPC. 
So I quickly do that. 
Go to your VPCs, actions, create default VPC, accept the defaults, and we're good to go. 
So in the last lesson I launched an EC2 instance using this user data. 
So launch, select Amazon Linux 2, my usual T3.micro, configure instance details and then I expanded the advanced details and pasted in some user data. 
User data is the EC2 implementation of bootstrapping. 
Essentially, whatever you paste in this user data section is used by the EC2 instance, when it's first provisioning so it can install applications, it can perform certain configurations, it can pull down data from a GitHub repository or an S3 bucket. 
Anything that you can put as a script or a script like set of directives could be given inside this user data. 
Now this user data can take a number of different forms. 
It can either be a shell script or it can use something called cloud init. 
If it's a shell script that takes the form of either a PowerShell script if it's Windows or a Bash script if it's Linux and in the previous lesson, this is the Bash script that we used to install and set up the Cat Hall of Fame website so this has been adjusted slightly to be this lesson's script. 
So instead of 01_AMI it's 02_bootstrapping, but it does exactly the same thing. 
It's a series of shell script commands, so we're indicating at the top here that we want to use Bash. 
We're using YUM, which is the package manager to install a system update and then install the web server and a utility called wget and then just skipping ahead a couple of lines will be using the wget utility to download the assets with Cat Hall of Fame website from the GitHub repository, and then, finally we'll be making sure that the HTTPD or web server is started and ready to serve these assets. 
Now this is just a shell script. 
It's a series of commands to run in order by the operating system or the shell of the EC2 instance but EC2 is capable of using something slightly different that's known as cloud init. 

Now, rather than a series of direct operating system instructions, cloud init enables you to provide directives. 
Now they can be operating system explicit command. 

So in this case we're still using wget to download the assets from the GitHub repository, but they can also be desired state commands. 
So these are operating system agnostic commands that essentially reflect what you want the instance to do. 
So in this case, we're wanting the instance to be successfully installed with the web server and wget and we don't have to worry about the actual package manager that used to do that. 
If we're using cloud init, we can abstract away from the actual operating system. 
Now, I'm not going to cover cloud init in this lesson, I will make sure I do include a link in the lesson description with more information. 
All I really want to focus on in this lesson is bootstrapping as a process. 
You've already seen how to perform bootstrapping and if you do have any experience with Windows or Linux shell scripting, you'll be able to use this user data with the Shell script style format to do any form of configuration or installation on Windows or Linux instances. 
Using cloud init it is a little bit more complicated, but it is really powerful if you're using this in production. 
Now, the main takeaway that I want you to have from this lesson is why you'd use bootstrapping versus AMIs. 
The biggest advantage to baking any configuration into an AMI is to reduce the time it takes to provision that instance. 



So if you got any applications that take a long period of time to install and configure then they're candidates for baking into the AMI. 
An example of this is if you need to get new instances into production in less than 20 minutes and an application takes 45 minutes to install and configure, then you know you can't use bootstrapping. 
Bootstrapping in that scenario would be including the shell commands in the user data that would perform the installation of the application automatically but if it takes 45 minutes, it's going to be 45 minutes before your instance is ready for production. 
So in that case, you'd use an AMI. 
You get a source instance, you perform the installation, get everything ready to go, and then create an AMI from that source instance, and that would mean you could bring your instance into production readiness within a couple of minutes. 
The downsides to using AMI is that you don't really have the ability to do any dynamic configuration. 
So if you bake everything into the AMI, it's already going to be configured. 
You can't really do any configuration based on the size of the instance, the type of the instance, the subnet the instance is in, or any DNS or IP addressing. 
Anything specific that you want to be dynamic if you use 100% AMI baking you don't have that option. 
It's all done. 


Use Case:
Now choosing between AMIs and bootstrapping doesn't have to be a binary one or the other decision you can choose to use and AMI to bake in lot of the really intensive parts of building an application. 
So if you're doing an installation and that installation say takes 20 or 30 minutes and then after the installation, you can do some configuration. 
What you might want to do is AMI bake the installation and then perform the configuration dynamically, using bootstrapping. 
For the exam, remember, it's not a one or the other. 
You've got the capability to AMI bake some stuff and you want to do that when it's lengthy, when it's time intensive to do, and when it could impact the ability to bring things into production. 
Whenever you've got anything that's dynamic when you want to do it at instance provisioning time that's when you'd used bootstrapping and generally, most production systems use a combination of the two. 
There are exam questions on this, so when you do face an exam question that might mention AMI baking or bootstrapping, remember, AMIs are for your lengthy static configuration. 
Bootstrapping is what you use for anything dynamic. 
When you're facing a question that talks about, you need to get an instance into production within a certain time frame and then it says that the application might take 20 or 30 minutes to install focus on the timeframes. 
It's those that will give you the clues whether you need to use AMI baking or bootstrapping. 
If you need to do the work upfront. 
If you need to save time, bake it into the AMI. 
If you need to do any dynamic configuration then use bootstrapping. 
We'll be using both of these as we proceed throughout the course with the demos and the examples, so I'm not going to cover any more technical depth in this lesson. 
I just wanted to introduce you to how you make an AMI and how you perform bootstrapping using user data. 
So I have given you two different examples using a Bash style user data. 
So a list of shell commands and using cloud init, which is more of a desired state declarative type syntax. 
So you don't need to know these from memory. 
Just remember that there are two distinct ways that you can provide user data. 
With that being said, that is everything I wanted to cover in this lesson. 
You don't need any more technical depth at this stage. 
It's just the introductory architecture that you'll need to be aware of. 
So go ahead, mark this video as complete, and when you're ready, join me in the next where I'll be talking about instance network interfaces, IPs, and DNS names. 
