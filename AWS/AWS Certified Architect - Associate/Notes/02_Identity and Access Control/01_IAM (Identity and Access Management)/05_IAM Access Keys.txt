Access keys are a pair of values used by applications, SDKs, or the AWS command line to authenticate to AWS. 
Access keys consist of two parts: the access key ID and secret access key. 
The access key ID is the public part of the key and is stored by AWS once generated. 
Access Key ID : AKIAIOSFODNN7EXAMPLE 
The secret access key is the sensitive and private part of the access key, available only once when the access key is initially generated. It's stored only by the owner and should never be revealed. 
Secret Access Key : w3a1rXUtnFEMI/K7MDENG/bPKRfiCYEXAMPLEKEY 
An IAM user is the only identity that uses access keys. 
They are allowed two sets. They can be created, deleted, enabled, and disabled. 
AWS allows a maximum of two access keys per AWS user.It is not about whether the status is active or inactive. There can be a maximum of two access keys active/inactive.
They can't be used to log in to the console, and they don't expire. 
If anyone finds a set of access keys, they have access to the permissions of the IAM user to which they belong. 



No, in terms of what operations you can do with an access key well currently have created it and it's active. 
You can disable an access key and the AWS terminology for that is to make the key inactive.
You're able to make an inactive key active again so I can click on Make Active. 
You can also delete an access key when you delete it.  It's removed entirely from the system, and you can't use it anymore to interact with eight of us. 
Now AWS do recommend that these are rotated regularly. 
So if you have any uses for an access key than what you should do, really is to keep the uses tied down to one of them, and then periodically you can create another access key. 


Access keys are checked every time they used. Whenever an API call is made from the command line or using the SDK, you're using a pair of access keys, and every single time that that occurs, you're authenticated. 
Using those keys and then based on which IAM user those keys belong to you get a set of policies and then you're authorized based on their set of policies. 
So if you make access keys inactive than immediately, every usage of that access key pair is denied. 
If an access key pair is active, so you're able to use it and you update the policies that are associate ID with the identities of the user, that Access Key belongs to then immediately the permissions that there was access keys have is adjusted. 
So that's important to keep in mind every single time that these access keys air used their checked for validity and then you're authorized based on the policies that the user has at the time that they're used. 
That's critical to understand Now. 
Access keys don't expire when you create them. They work until you make them inactive or you delete them. 
Access keys to authenticate to the AWS console, so access keys don't let you authenticate to the console you I and use name and passwords don't let you authenticate. 


################################################################################################################################

Welcome back, and in this lesson, I want to talk about access keys. 
I'm gonna cover the theory in this lesson and then in the lesson immediately after this one, I'll show you how you can use access keys to set up your command line. 
Tools to access eight of US access keys are the way in which the AWS command line tools and many other applications authenticate to eight of us in the same way that you identify to the console. 
Using a username, improve your identity with a password and optionally an M f A access keys do the same for applications. 
Access keys is actually a single thing, although the name suggests it's multiple things. 
The term access keys refers to a pair of keys, a pair of keys that need to be used together. 
First, there's the access key i D. 
And that's the public part. 
In many ways, it's similar to a user name. 
It identifies the access key, and it's something that both you and AWS possess. 
You can always get the access key ID. 
It's in the AWS console for any access keys which exist now. 
The second part of an access key pair is known as the Secret Access Key. 
The secret access key is like your password. 
It's generated. 
When you generate the access keys, you can note it down, store it somewhere, do whatever you want with it, but it's only available. 
The ones when you make the set of access keys is the only time that you're able to get this from AWS. 
Keep that in mind for the exam. 
It's your responsibility to safely store the secret access key. 
It is not stored by AWS. 
The function of the secret access key is to prove that you are who you say you are. 
So, with secret part of the access key, you can prove that you have eight of us. 
Keep the access key I d. 
You keep the secret access key and you essentially use this secret access key to prove your identity. 
Eight of us keep the access key. 
I d only you keep a secret access key, so that's an important dynamic to understand. 
You cannot ever get back with secret access key from AWS. 
There are exam questions which talk about this, which is why I'm stressing it multiple times the holder of the access Key i. 
D. 
On dhe, the Secret access key are able to interact with AWS as an I am user. 
So let's look at this. 
If I go to users and then I pick my test user click on the security credentials tab. 
It's here where I can create a pair of access keys so I'll do that. 
I'll click on "Create Access Key." Now when I create the access key on provided with the access key I. 
D. 
So this is the public component. 
This is the access key i D that you can always keep access to, and you'll see that it's great out with the moment. 
But this is actually stored in the console so you can always get the access key i d. 
But if I click on show, this is the secret access key, and this is the part that you'll need to interact with AWS. 
This is only available. 
This one's If I close this box down, I can never get that secret access key again. 
Only I keep it. 
So it's my responsibility to store it. 
No, in terms of what operations you can do with an access key well currently have created it and it's active. 
You can disable an access key and the AWS terminology for that is to make the key inactive so i'll click on that on that key is now inactive. 
It can't be used to interact with AWS. 
You're able to make an inactive key active again so I can click on Make Active. 
It will keep the same secret access key, and I'll be able to use it to interact with eight of us again. 
You can also delete an access key when you delete it. 
It's removed entirely from the system, and you can't use it anymore to interact with eight of us. 
Now, the reason why I keep stressing this is that it is very important for the exam. 
You might face exam questions where you're asked to change the secret access key or you've lost the secret access key, and you need to update the secret access key part for a given set of actors keys. 
And you can't do that. 
If you do need to research access keys forever, reason then you essentially need to create a new one. 
Provide that to any users of that key. 
So any applications or any command lines and then remove the old one, you can only have two sets of access keys in a given IAM user, so we've got one that's created at the moment. 
I can go ahead and create another one. 
If I tried to create 1/3 I'll be prevented from doing so, and it's important to understand I have seen some trick questions in the exam. 
It is to access keys total. 
You can make one of these inactive and try to create a new one, and you'll still get the same era. 
It is know about whether the status is active or inactive. 
You are allowed a maximum of two access keys per AWS user. 
Now AWS do recommend that these are rotated regularly. 
So if you have any uses for an access key than what you should do, really is to keep the uses tied down to one of them, and then periodically you can create another access key. 


Access keys are checked every time they used. Whenever an API call is made from the command line or using the SDK, you're using a pair of access keys, and every single time that that occurs, you're authenticated. 
Using those keys and then based on which IAM user those keys belong to you get a set of policies and then you're authorized based on their set of policies. 
So if you make access keys inactive than immediately, every usage of that access key pair is denied. 
If an access key pair is active, so you're able to use it and you update the policies that are associate ID with the identities of the user, that Access Key belongs to then immediately the permissions that there was access keys have is adjusted. 
So that's important to keep in mind every single time that these access keys air used their checked for validity and then you're authorized based on the policies that the user has at the time that they're used. 
That's critical to understand Now. 
Access keys don't expire when you create them. They work until you make them inactive or you delete them. 
Access keys to authenticate to the AWS console, so access keys don't let you authenticate to the console you I and use name and passwords don't let you authenticate. 
Using the command line For the command line, it's access keys. 
For the console UI It's username and password and optionally m f A. 
And that's all of the theory around access keys in the next lesson will be demonstrating using access keys to set up the command line tools on various different operating system. 
So the next lesson will be essentially a follow up to when you created your own personal a DBS account. 
At the start of the course, I'll be showing you how to create an I am user and give the admin rights. 
I'll be showing you how to create access keys for that I am user and then using those access keys to install and set up the command line on all of the three common operating systems. 
And that will set you up in a position where you can use a console UI or the command line as we go through the course. 
With that being said, this is everything I wanted to cover about access keys. 
Go ahead and mark this lesson as complete and I'll see you in the next