IAM roles are assumed by another identity allowed in the trust policy — IAM user, AWS service, another AWS account, web identity, or even an anonymous identity. 
When a role is assumed, the Security Token Service (STS) generates a time-limited set of access keys (temporary security credentials). These access keys have the permissions defined in the permissions policy. IAM roles have no long-term credentials (access keys or username and password). 

Trust Policy:
Trust policies define list of entities or identities or services that can assume a role. 

Permissions Policy:
The permissions policy is an IAM policy that gives that role permissions on things. It's the same as an IAM policy on a user or an IAM policy on a group. It basically defines the actions the entities defined in the trust policies can perform.

How Role works:
Roles are used to give AWS services permissions on your behalf. 
When somebody assumes a role. They make an assume role API call which ask AWS let that entity assume a role. 
If they're on the trust policy so if this service or this user or somebody in this remote AWS account is allowed to assume the role, then they actually assume that role and when they assume the role, a service called STS, which is the security token service that gets involved. 
STS generates what's known as a temporary security credentials. These are like access keys that we talked about in a previous lesson, but they are time limited. So if STS determines that somebody can assume a role it generates temporary security credentials and those temporary security credentials are basically time limited access keys that get the permissions based on the permissions policy of the role. 
This is essentially just allowing any identity to temporarily make use of permissions that a role has. 




Exam Facts and Figures: IAM Roles 
• TAM roles have no long-term credentials. 
• They are sts:AssumeRole by another identity: 
IAM users 
AWS services 
External accounts 
Web identities 
• Temporary security credentials are generated by STS. 
• Trust policy controls which identities can assume the role. 
• Permissions policy defines the permissions provided. 
• Temporary credentials expire. 
• Example scenarios: 
Company merger: Suppose a Company A is being merged with Company B merger is taking place. Company A has 2,000 employees, and company B also has 2000 employees. And we want all the employees of company B to be able to access the AWS account of Company A. One option would be to create 2000 brand new IAM users inside the AWS Account of Comapany A, but that would be a lot of work for Company A. Another option is that you could make a role in Company A AWS account and set the trust policy on that role to the account of Comapany B. Then the people in that remote AWS account could assume the role in Company A account to access resources, so your admin overhead is only creating the role and by adding the trust policy and saying that Company A trusts this remote account, thus give them all of the administrative overhead.  So you're allowing a remote account, say Company B, to assume the role in Company A account. The Comapany B account is responsible for then allowing their individual IAM users to assume the role. They can assume that role and get access to Company A account but you're the one who has had to create that one single role and just that one trust policy that's called delegation.  It's a way that you can say that you trust another account. 
"Break-glass"-style extra access 
Cross-account access: Another example is that you might have multiple accounts in your company, say, 10 different AWS accounts. 
How do you allow staff to access each one of those accounts? You could create everyone 10 IAM users one in each AWS account. 
You could do that, but a better option will be to create a single IAM role in each of the accounts. 
Let the users log in to one single AWS account and then assume the role in the remote account. 
Doing that, you only need to manage a single IAM account, and you're going to see a demo of that process in the next topic, where I talk about role switching inside the console. 
So there is a way if you manage multiple AWS accounts, to access other AWS accounts by just using the single IAM user that you have and that's generally something that's used within AWS organizations, which is a multiaccount management product inside AWS. 
AWS service access: Maybe you're working on a mobile application, maybe your developer expects 500,000 users of the application. 
The developer has told you that she wants to store high scores in a DynamoDB table. 
Now, 500,000 is far too large number to give every user of the application their own IAM to use. 
You can't do it. 
You got that 5,000 user limit but what you could do is allow the application to assume a single role and that role have the permissions to store the data. 
Web identity federation: This is a process called Web Identity Federation, because what you can do is create a role and say that you allow any Twitter user, any Facebook user, any Google user to assume that role. 
In doing so, you could potentially allow millions of users of your application to assume that role and access high scores stored in DynamoDB and that's the method that's used for a lot of mobile applications to access AWS resources. 



###################################################################################################################
Welcome back, and in this lesson, I want to cover IAM roles. 
So roles are specific type of identity available inside AWS and for anyone new to AWS, they're one of the most difficult concepts to grasp. 
Not because they're technically difficult it's fairly easy to understand how roles work. 
What's difficult to understand is when and where you would use roles and that's what I want to get across this lesson I want to stress that side of things. 
Remember, you're doing a solutions architect exam. 
So it's perhaps more important that you understand the why about roles rather than the how so I'm going to focus quickly on stepping through how roles work, but I also want to talk about when and where you'd use roles. 
Now I mentioned earlier in this topic how IAM users were best used when you could visualize the entity or entities who would make use of the IAM user. 
It could be a single human. 
It could be an application, or it could be a service account used by backend systems, and I also mentioned the hard limit of 5,000 IAM users, so you can only ever have 5,000 IAM users in any one single AWS account. 
Those are two critical limitations of IAM users and one of the benefits of IAM roles. 
I want to start with the architecture of roles, and then we can go through with some of the scenarios where roles might be used. 
IAM roles have a pretty simple architecture once you understand how it works. 


Roles are not logged into they're assumed:
So an entity is allowed to assume the role and when it assumes the role it gains the permissions that that role has. 
Now earlier in the course I compared this to a fire drill or a fire exercise within an office environment. 
You might know somebody who is a fire marshal who's one of the people that puts on a nice glowing hat and a nice glowing vest and helps people evacuate a building in the event of a fire. 
This person doesn't normally have the authority to boss around senior management or the CEO, but in his or her role as a fire marshal, perhaps he or she does. 
So what that person is doing is assuming the role of being a fire marshal and by doing that, gaining additional power or additional permissions in the business to be able to do things. 
The fire marshal is a role. 
Multiple people might become that role. 
They might assume that role. 
It might be Bob one week, and it might be Jane the following week. 
The fire marshal is the role and Bob and Jane are the identities. 
So bring that back to AWS. 
You might have multiple identities in your account or other accounts, or even non AWS identities, and they might assume a role to gain the permissions of that role. 
What I want to do is talk about why you would do that. 

Scenario:
So let's quickly go through the technical elements of a role. 
Now I'm going to go ahead and create a role, and it's going to be a fairly simple one. 
So I'll click on Create Role. 
Now, roles can serve many different functions, and a lot of these are going to be covered later in the course. 
For now, I'm going to create a role that can be utilized by an AWS service and I want to keep it simple, and it's going to be an EC2 role. 
So I'll select EC2, click next permissions, and then in the filter box I'm going to type S3 because I want to filter to this down to S3 and select Amazon S3 read only access. 
Now this policy provides read only access to S3, as the name suggests. 
So it just allows you to do get* on list* on any resource. 
So that's important to understand. 
It's a managed policy. 
So I'm going to apply this to the role. 
I'll accept the rest of the defaults and I'll just call this for now test role. 
I'll hit Create Role to create it and then we can investigate what this actually does. 
I have created a role that could be assumed by EC2. 
So let me rewind a little bit. 

Trust Policy:
With a role, you define entities which can assume that role. Now this is controlled by a component of that role called the trust policy. So the trust policy defines who can assume that role. So who could become the fire marshal in the physical example, there must be a list of people who are qualified to be a fire marshal, a list of people who were allowed to become fire marshals, and with this role example, there are a list of entities or identities or services that can assume this role. 
That's declared in the trust relationship of the role. 
So let's have a look at that. 
In this particular case, I'm going to show the policy document. 
So this is the trust policy of a role. 
Every role has two policies: a trust policy and the permissions policy. 

Permissions Policy:
The permissions policy is just a permissions policy. It's just an IAM policy that gives that role permissions on things. It's the same as an IAM policy on a user or an IAM policy on a group. Nothing special about that. 


Use Cases:
Give AWS services permissions on your behalf
What's special about the trust policy is it controls who can assume the role. 
In this case, we're allowing EC2 to assume this role. 
EC2 is a service in AWS that provides virtual machines. 
You can make a virtual machine using EC2 and this role allows an EC2 instance to assume that role. 
Now, why might you do that? Well, when something assumes a role, it gets access to whatever the permissions policy says that it does. 
That's critical to understand. 
So it might be an IAM user. 
It might be somebody in a different AWS account. 
It might be an AWS service. 

How Role works:
One of the key reasons roles get used is to give AWS services permissions on your behalf. 
So let's quickly step through what happens when somebody assumes a role. 
They make an assume role API call. This is just asking AWS let me assume a role. If they're on the trust policy so if this service or this user or somebody in this remote AWS account is allowed to assume the role, then they actually assume that role and when they assume the role, a service called STS, which is the security token service that gets involved. 
What STS does is generate what's known as a temporary security credentials. These are like access keys that we talked about in a previous lesson, but they are time limited. So if STS determines that somebody can assume a role it generates temporary security credentials and those temporary security credentials are basically time limited access keys that get the permissions based on the permissions policy of the role. So it sounds pretty complicated, but it's essentially just allowing any identity to temporarily make use of permissions that a role has. 

The really interesting part is when and where you'd use it. 
That's what I want to focus on but I just want to make sure that you've got the architecture and you understand that. 
So another identity, this might be an IAM user. 
It might be a user in a different AWS account. 
It might be an AWS service. 
They assume a role if they can assume that role then STS looks at what the role's permissions policy is and it generates temporary credentials that give whatever identity assumed that role access to the AWS account that that role is in based on the permissions policy. 
So you're probably sat there thinking, I get the technical side of roles most people understand fairly quickly how roles work. 
What people struggle with is why they're used what they do. 
So let's run through that. 
I want to talk about a few patterns and antipatterns. 
They're the technical terms for things which are ideally suited for roles, so patterns are things that roles are ideally suited for and antipatterns are inversely things that roles are not suited for. 
I'll start off with antipatterns. 

Cases Where Roles Can't be used:
Roles can't be used when you need something to log in to. 
So role usage is based on an identity that already exists, so you can't use a role to log in to the AWS console. 
That's something that comes up all the time as an exam question. 
Roles don't have usernames and passwords. 
Roles don't have any access keys. 
So if we step through what a role has, there are no long term credentials. 
There are no access keys, no usernames, and passwords. 
You cannot log into this role. 
You have to assume it. 
So that's the first thing to understand. 
The only way a role has any use is if you already have an identity. 

Use Cases For Roles:
So let's look at some of the examples of when you might use a role. 
Let's say you need extra rights for something. 
Let's say you have a group of support engineers who are supporting an architecture that you've designed as a solution architect. 
Now you want to give the support engineers some fairly basic access rights relatively low access rights but you know that occasionally something serious happens an application crashes and you want to give the option to use something like a break glass style process. 
So, you know, remember your old fire alarms where you have to break the glass and press the fire alarm button. 
This is the same type of architecture, but in a technical sense. 
So you want to give the support engineers the ability if something really bad happens to gain some extra permissions, and you could use a role for that. 
So you can have a role that granted emergency super user or system administration permissions and then allow these support engineers to assume that role only if they needed to. 
So that might be one example. 
Another example might be service access. 
So let's say you've got other services inside AWS. 
Until this lesson, if you wanted to grant an AWS service access to something else, you might have struggled to think of how this is possible. 
Well, roles could be used to grant services access to things. 
You might give an EC2 instance access to a role so it can access an S3 bucket without needing to use regular credentials. 
You might give a role to a Lambda function to allow it to execute and interact with other AWS services without giving it access keys. 
Now, I know that you haven't covered EC2 yet, and I know you haven't covered Lambda yet and when you do you'll understand why these roles are so important. 
Now another scenario is let's say you're merging with another company. 
Your current company has 2,000 employees, and their company also has 2,000. 
You want all of their employees to be able to access your AWS account while the merger is taking place. 
Well you could create 2,000 brand new IAM users. 
This would still strictly be below the 5,000 IAM users for a single account, but it would be a lot of work on your behalf. 
One option is that you could make a role in your AWS account and set the trust policy on that role to the account of the company that's merging with yours. 
Then the people in that remote AWS account could assume the role in your account to access resources in your account, so your admin overhead is only creating the role and by adding the trust policy and saying that you trust this remote account, you're giving them all of the administrative overhead. 
So you're allowing a remote account, say Company B, to assume the role in your account. 
The remote account is responsible for then allowing their individual IAM users to assume your role. 
They can assume that role and get access to your account but you're the one who has had to create that one single role and just that one trust policy that's called delegation. 
It's a way that you can say that you trust another account. 
Another example is that you might have multiple accounts in your company, say, 10 different AWS accounts. 
How do you allow staff to access each one of those accounts? You could create everyone 10 IAM users one in each AWS account. 
You could do that, but a better option will be to create a single IAM role in each of the accounts. 
Let the users log in to one single AWS account and then assume the role in the remote account. 
Doing that, you only need to manage a single IAM account, and you're going to see a demo of that process in the next topic, where I talk about role switching inside the console. 
So there is a way if you manage multiple AWS accounts, to access other AWS accounts by just using the single IAM user that you have and that's generally something that's used within AWS organizations, which is a multiaccount management product inside AWS. 
I'll be demonstrating that in the next topic, but I just wanted to mention it so you'd know how the architecture works. 
Now a final example is that maybe you're working on a mobile application, maybe your developer expects 500,000 users of the application. 
The developer has told you that she wants to store high scores in a DynamoDB table. 
Now, 500,000 is far too large number to give every user of the application their own IAM to use. 
You can't do it. 
You got that 5,000 user limit but what you could do is allow the application to assume a single role and that role have the permissions to store the data. 
I'll be talking more about this later in the course. 
This is a process called Web Identity Federation, because what you can do is create a role and say that you allow any Twitter user, any Facebook user, any Google user to assume that role. 
In doing so, you could potentially allow millions of users of your application to assume that role and access high scores stored in DynamoDB and that's the method that's used for a lot of mobile applications to access AWS resources. 
Again, I'm just skimming over this at a high level, but I want you to be aware of the concept. 
The most important thing to understand about roles as well as the architecture and when and where you'd use them is that they don't have any long term credentials. 


How Roles work:
When a role is assumed, the security token service generates this time limited set of access keys known as temporary security credentials. 
They have a limited lifespan. 
When they expire, they don't work anymore, and you have to reassume that role to get a new set of temporary security credentials to continue accessing the AWS resources so that's important to understand. 
IAM users have long term credentials, username and password and access keys. 
Roles have short term temporary credentials. 
Which are these time limited access keys generated by STS. 
Keep that in mind, it will come up in the exam. 
Some additional exam hints to be aware of so I've talked about this, IAM roles have no long term credentials. 
Be aware of that. 
It is really important. 
To get access to a role, you'd use STS assume role so that STS assume role is done by another identity. 
That's IAM users, AWS services, external accounts, and web identities. 
Temporary security credentials are generated by STS. 
The trust policy that's the trust policy that's on the role determines which identities can assume that role. 
The permissions policy. 
That's just a normal IAM policy that defines what permissions are provided by STS. 
Now these temporary credentials expire. 
They are time limited and once they expire, you can't use them anymore, and you need to refresh them. 
Some example scenarios that I have talked about the company merger, the AWS service access, the break style extra access, the cross account access, and even Web Identity Federation. 
Now, this is just really the theory. 
I'm not going to demonstrate this yet in this lesson, I'm going to cover it a little bit when I talk about role switching in the next topic of the course and throughout the course, you're going to experience how IAM roles work. 
We're going to start with EC2 instance roles in the EC2 section of the course. 
You're going to look at Lambda execution roles in the Lambda section of the course. 
Roles are used everywhere, so don't worry, you'll get plenty of exposure. 
For now, I just want you to be aware of when and where you'd use a role and exactly how it works. 
So with that being said, that is everything that I wanted to cover about IAM roles. 
This is also the last lesson in this topic. 
In the next topic, we're going to be covering AWS Organizations, which is a multiaccount management system, as well as how you can use roles to switch between accounts. 
So manage one set of IAM users and use roles to allow you to switch into other accounts. 
So go ahead, mark this lesson as complete, and then when you're ready, join me in the next section, which is multiaccount and organizations. 
